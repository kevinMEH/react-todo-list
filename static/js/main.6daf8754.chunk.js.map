{"version":3,"sources":["GlobalStyle.js","components/AddTask/AddTask.styles.js","components/AddTask/AddTask.js","components/List/List.styles.js","components/Task/Task.styles.js","components/Task/Task.js","components/List/List.js","Home.js","index.js"],"names":["GlobalStyle","createGlobalStyle","Container","styled","div","Subtext","p","Wrapper","AddTask","handleSetTasks","useState","value","setValue","onSubmit","event","preventDefault","type","placeholder","onChange","target","style","display","Task","task","index","moveCard","removeTask","ref","useRef","useDrop","accept","collect","monitor","handlerId","getHandlerId","hover","item","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","drop","useDrag","id","drag","data-handler-id","text","onClick","List","tasks","setTasks","dragCard","tempTasks","splice","map","Home","existingTasks","JSON","parse","localStorage","getItem","setId","useEffect","setItem","stringify","DndProvider","backend","HTML5Backend","includes","newTasks","indexOf","console","log","paddingTop","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6daf8754.chunk.js","sourcesContent":["import styled, { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n    \n    * {\n        font-family: \"Inter\", sans-serif;\n    }\n    \n    html {\n        box-sizing: border-box;\n        font-size: 62.5%;\n        line-height: 1;\n    }\n    \n    *, *:before, *:after {\n        box-sizing: inherit;\n    }\n    \n    body {\n        margin: 0;\n        padding: 0;\n        \n        h1 {\n            font-size: 4rem;\n            font-weight: 700;\n        }\n        \n        h2 {\n            font-size: 2.25rem;\n            font-weight: 600;\n        }\n        \n        p, label, input, div, span {\n            font-size: 1.8rem;\n            font-weight: 400;\n        }\n    }\n`\n\n// centering content! Better method!\nexport const Container = styled.div`\n    padding-top: 4%;\n    height: auto;\n    max-width: 480px;\n    margin: auto;\n`\n\nexport const Subtext = styled.p`\n    margin-top: 20px;\n    color: #888888;\n    font-size: 1.4rem;\n    line-height: 2rem;\n`","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    width: 100%;\n    align-items: center;\n    text-align: center;\n    padding-bottom: 4%;\n    display: flex;\n    \n    form {\n        width: 100%;\n    }\n    \n    input {\n        border: 1px solid grey;\n        border-radius: 5px;\n        padding: 4px 10px 4px 10px;\n        height: 40px;\n        width: 100%;\n    }\n`","import React, { useState } from \"react\";\n\nimport { Wrapper } from \"./AddTask.styles\";\n\nconst AddTask = ({ handleSetTasks }) => {\n    \n    const [value, setValue] = useState(\"\");\n    \n    function handleValueChange(event) {\n        setValue(event.target.value);\n    }\n    \n    function handleSubmit(event) {\n        handleSetTasks(value);\n        setValue(\"\");\n        event.preventDefault();\n    }\n    \n    return (\n        <Wrapper>\n            <form onSubmit={handleSubmit}>\n                <input type=\"text\" placeholder=\"Add Task\" value={value} onChange={handleValueChange} />\n                <input type=\"submit\" value=\"Add Task\" style={{display: \"none\"}} />\n            </form>\n        </Wrapper>\n    )\n}\n\nexport default AddTask;","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    \n`","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    display: grid;\n    grid-template-columns: auto min-content;\n    margin: 12px 0px;\n    height: 40px;\n    \n    button {\n        border: none;\n        padding: 12px 24px 12px 24px;\n        color: #FFFFFF;\n        background-color: #000000;\n        border-radius: 5px;\n        font-weight: 600;\n    }\n    \n    span {\n        border: 1px solid grey;\n        border-radius: 5px;\n        padding: 4px 15px 4px 15px;\n        margin-right: 15px;\n        display: flex;\n        align-items: center;\n    }\n`","import React, { useRef } from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\n\nimport { Wrapper } from \"./Task.styles\";\n\n\nconst Task = ({ task, index, moveCard, removeTask }) => {\n    const ref = useRef(null);\n    \n    // dropping\n    const [{ handlerId }, drop] = useDrop({\n        accept: \"task\",\n        collect(monitor) {\n            return {\n                handlerId: monitor.getHandlerId(),\n            };\n        },\n        hover(item, monitor) {\n            if(!ref.current) {\n                return;\n            }\n            const dragIndex = item.index;\n            const hoverIndex = index;\n            \n            if(dragIndex === hoverIndex) return;\n            \n            // Rect on screen\n            const hoverBoundingRect = ref.current?.getBoundingClientRect();\n            const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2; // Dist from top to mid\n            const clientOffset = monitor.getClientOffset();\n            const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n            \n            if(dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n                // If dragging down but client Y is less than middle of rect, dont swap\n                return;\n            }\n            \n            if(dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n                // If dragging up\n                return;\n            }\n            \n            moveCard(dragIndex, hoverIndex);\n            \n            item.index = hoverIndex;\n        }\n    });\n    \n    const [ , drag] = useDrag({\n        type: \"task\",\n        item: () => {\n            let id = task.id;\n            return { id, index };\n        }\n    });\n    \n    drag(drop(ref));\n    \n    function handleClick() {\n        removeTask(task);\n    }\n    \n    return (\n        <Wrapper ref={ref} data-handler-id={handlerId} >\n            <span>{task.text}</span>\n            <button onClick={handleClick}>\n                Remove\n            </button>\n        </Wrapper>\n    )\n}\n\nexport default Task;","import React from \"react\";\n\nimport { Wrapper } from \"./List.styles\";\n\nimport Task from \"../Task/Task\";\n\nconst List = ({ tasks, setTasks, removeTask }) => {\n    \n    const moveCard = (dragIndex, hoverIndex) => {\n        const dragCard = tasks[dragIndex];\n        let tempTasks = [...tasks];\n        tempTasks.splice(dragIndex, 1);\n        tempTasks.splice(hoverIndex, 0, dragCard);\n        setTasks(tempTasks);\n    };\n    \n    return (\n        <Wrapper>\n            {tasks.map((task, index) => (\n                <Task task={task} index={index} moveCard={moveCard}\n                    removeTask={removeTask}\n                />\n            ))}\n        </Wrapper>\n    )\n}\n\nexport default List;","import React, { useEffect, useState } from \"react\";\n\nimport { GlobalStyle, Container, Subtext } from \"./GlobalStyle\";\n\nimport AddTask from \"./components/AddTask/AddTask\";\nimport List from \"./components/List/List\";\n\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\n\nfunction Home() {\n    const [ tasks, setTasks ] = useState(() => {\n        let existingTasks = JSON.parse(localStorage.getItem(\"tasks\"));\n        if(existingTasks) return existingTasks;\n        else return [];\n    });\n    const [ id, setId ] = useState(() => 1);\n    \n    useEffect(() => {\n        localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n    }, [tasks]);\n    \n    function handleSetTasks(text) {\n        if(text === \"\") return;\n        for(let task of tasks) {\n            if(task.text === text) return; // No duplicates\n        }\n        setTasks([...tasks, {id: id, text: text}]);\n        setId(id + 1);\n    }\n    \n    function removeTask(task) {\n        if(tasks.includes(task)) {\n            let newTasks = [...tasks];\n            newTasks.splice(newTasks.indexOf(task), 1);\n            setTasks(newTasks);\n        } else {\n            console.log(\"ERROR: Tasks does not have task \" + task);\n        }\n    }\n    \n\treturn (\n\t\t<Container>\n\t\t\t<GlobalStyle />\n            <h1>React TODO List</h1>\n            <h2>By Kevin Liao</h2>\n            <AddTask handleSetTasks={handleSetTasks} />\n            <DndProvider backend={HTML5Backend} >\n                <List tasks={tasks} setTasks={setTasks} removeTask={removeTask} />\n            </DndProvider>\n            \n            <div style={{paddingTop: \"30px\"}} >\n                <Subtext>\n                    This is a TODO list project made using React, a derivative of the \"Level 4 Grocery List\" project. Since we're making a list that we can add and remove items to, I thought it would be appropriate if I just made it a general purpose TODO list app, so here it is.\n                </Subtext>\n                <Subtext>\n                    In this project, I used the React Javascript library to build the HTML. I also used a library called React-DND, which stands for React Drag and Drop, which is how you are able to drag and drop the tasks to reorder them. In addition to all of these, I also implemented storing to localStorage so that the tasks on the TODO list will presist between sessions and refreshes.\n                </Subtext>\n            </div>\n\t\t</Container>\n\t);\n}\n\nexport default Home;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Home from \"./Home\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Home />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}